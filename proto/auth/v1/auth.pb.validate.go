// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/v1/auth.proto

package authv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/Anabol1ks/orderhub-pkg-proto/proto/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Role(0)
)

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) > 254 {
		err := RegisterRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 254 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 72 {
		err := RegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 72 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := RegisterResponseValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterResponseValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

func (m *RegisterResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) > 254 {
		err := LoginRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 254 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 72 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 72 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

func (m *LoginRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := LoginResponseValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetTokens()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokens()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Tokens",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on TokenPair with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenPair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenPair with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenPairMultiError, or nil
// if none found.
func (m *TokenPair) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenPair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 16 {
		err := TokenPairValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRefreshToken()) < 24 {
		err := TokenPairValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AccessExpiresIn

	// no validation rules for RefreshExpiresIn

	if len(errors) > 0 {
		return TokenPairMultiError(errors)
	}

	return nil
}

// TokenPairMultiError is an error wrapping multiple validation errors returned
// by TokenPair.ValidateAll() if the designated constraints aren't met.
type TokenPairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenPairMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenPairMultiError) AllErrors() []error { return m }

// TokenPairValidationError is the validation error returned by
// TokenPair.Validate if the designated constraints aren't met.
type TokenPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenPairValidationError) ErrorName() string { return "TokenPairValidationError" }

// Error satisfies the builtin error interface
func (e TokenPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenPairValidationError{}

// Validate checks the field values on RefreshRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefreshRequestMultiError,
// or nil if none found.
func (m *RefreshRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRefreshToken()) < 24 {
		err := RefreshRequestValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshRequestMultiError(errors)
	}

	return nil
}

// RefreshRequestMultiError is an error wrapping multiple validation errors
// returned by RefreshRequest.ValidateAll() if the designated constraints
// aren't met.
type RefreshRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshRequestMultiError) AllErrors() []error { return m }

// RefreshRequestValidationError is the validation error returned by
// RefreshRequest.Validate if the designated constraints aren't met.
type RefreshRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshRequestValidationError) ErrorName() string { return "RefreshRequestValidationError" }

// Error satisfies the builtin error interface
func (e RefreshRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshRequestValidationError{}

// Validate checks the field values on RefreshResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshResponseMultiError, or nil if none found.
func (m *RefreshResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokens()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshResponseValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshResponseValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokens()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshResponseValidationError{
				field:  "Tokens",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshResponseMultiError(errors)
	}

	return nil
}

// RefreshResponseMultiError is an error wrapping multiple validation errors
// returned by RefreshResponse.ValidateAll() if the designated constraints
// aren't met.
type RefreshResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshResponseMultiError) AllErrors() []error { return m }

// RefreshResponseValidationError is the validation error returned by
// RefreshResponse.Validate if the designated constraints aren't met.
type RefreshResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshResponseValidationError) ErrorName() string { return "RefreshResponseValidationError" }

// Error satisfies the builtin error interface
func (e RefreshResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshResponseValidationError{}

// Validate checks the field values on IntrospectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IntrospectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntrospectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntrospectRequestMultiError, or nil if none found.
func (m *IntrospectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntrospectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 20 {
		err := IntrospectRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntrospectRequestMultiError(errors)
	}

	return nil
}

// IntrospectRequestMultiError is an error wrapping multiple validation errors
// returned by IntrospectRequest.ValidateAll() if the designated constraints
// aren't met.
type IntrospectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntrospectRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntrospectRequestMultiError) AllErrors() []error { return m }

// IntrospectRequestValidationError is the validation error returned by
// IntrospectRequest.Validate if the designated constraints aren't met.
type IntrospectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntrospectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntrospectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntrospectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntrospectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntrospectRequestValidationError) ErrorName() string {
	return "IntrospectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntrospectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntrospectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntrospectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntrospectRequestValidationError{}

// Validate checks the field values on IntrospectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntrospectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntrospectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntrospectResponseMultiError, or nil if none found.
func (m *IntrospectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntrospectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Active

	if m.GetUserId() == nil {
		err := IntrospectResponseValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntrospectResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntrospectResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntrospectResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Role

	// no validation rules for ExpUnix

	if len(errors) > 0 {
		return IntrospectResponseMultiError(errors)
	}

	return nil
}

// IntrospectResponseMultiError is an error wrapping multiple validation errors
// returned by IntrospectResponse.ValidateAll() if the designated constraints
// aren't met.
type IntrospectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntrospectResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntrospectResponseMultiError) AllErrors() []error { return m }

// IntrospectResponseValidationError is the validation error returned by
// IntrospectResponse.Validate if the designated constraints aren't met.
type IntrospectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntrospectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntrospectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntrospectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntrospectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntrospectResponseValidationError) ErrorName() string {
	return "IntrospectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntrospectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntrospectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntrospectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntrospectResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Target.(type) {
	case *LogoutRequest_RefreshToken:
		if v == nil {
			err := LogoutRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetRefreshToken()) < 24 {
			err := LogoutRequestValidationError{
				field:  "RefreshToken",
				reason: "value length must be at least 24 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *LogoutRequest_All:
		if v == nil {
			err := LogoutRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for All
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on GetJwksRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJwksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJwksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJwksRequestMultiError,
// or nil if none found.
func (m *GetJwksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJwksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetJwksRequestMultiError(errors)
	}

	return nil
}

// GetJwksRequestMultiError is an error wrapping multiple validation errors
// returned by GetJwksRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJwksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJwksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJwksRequestMultiError) AllErrors() []error { return m }

// GetJwksRequestValidationError is the validation error returned by
// GetJwksRequest.Validate if the designated constraints aren't met.
type GetJwksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJwksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJwksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJwksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJwksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJwksRequestValidationError) ErrorName() string { return "GetJwksRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJwksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJwksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJwksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJwksRequestValidationError{}

// Validate checks the field values on Jwk with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Jwk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Jwk with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JwkMultiError, or nil if none found.
func (m *Jwk) ValidateAll() error {
	return m.validate(true)
}

func (m *Jwk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKid()) < 1 {
		err := JwkValidationError{
			field:  "Kid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Jwk_Kty_InLookup[m.GetKty()]; !ok {
		err := JwkValidationError{
			field:  "Kty",
			reason: "value must be in list [RSA]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Jwk_Alg_InLookup[m.GetAlg()]; !ok {
		err := JwkValidationError{
			field:  "Alg",
			reason: "value must be in list [RS256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Jwk_Use_InLookup[m.GetUse()]; !ok {
		err := JwkValidationError{
			field:  "Use",
			reason: "value must be in list [sig]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetN()) < 10 {
		err := JwkValidationError{
			field:  "N",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetE()) < 1 {
		err := JwkValidationError{
			field:  "E",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JwkMultiError(errors)
	}

	return nil
}

// JwkMultiError is an error wrapping multiple validation errors returned by
// Jwk.ValidateAll() if the designated constraints aren't met.
type JwkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JwkMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JwkMultiError) AllErrors() []error { return m }

// JwkValidationError is the validation error returned by Jwk.Validate if the
// designated constraints aren't met.
type JwkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwkValidationError) ErrorName() string { return "JwkValidationError" }

// Error satisfies the builtin error interface
func (e JwkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwkValidationError{}

var _Jwk_Kty_InLookup = map[string]struct{}{
	"RSA": {},
}

var _Jwk_Alg_InLookup = map[string]struct{}{
	"RS256": {},
}

var _Jwk_Use_InLookup = map[string]struct{}{
	"sig": {},
}

// Validate checks the field values on GetJwksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJwksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJwksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJwksResponseMultiError, or nil if none found.
func (m *GetJwksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJwksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJwksResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJwksResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJwksResponseValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJwksResponseMultiError(errors)
	}

	return nil
}

// GetJwksResponseMultiError is an error wrapping multiple validation errors
// returned by GetJwksResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJwksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJwksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJwksResponseMultiError) AllErrors() []error { return m }

// GetJwksResponseValidationError is the validation error returned by
// GetJwksResponse.Validate if the designated constraints aren't met.
type GetJwksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJwksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJwksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJwksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJwksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJwksResponseValidationError) ErrorName() string { return "GetJwksResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetJwksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJwksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJwksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJwksResponseValidationError{}

// Validate checks the field values on RequestEmailVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestEmailVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestEmailVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestEmailVerificationRequestMultiError, or nil if none found.
func (m *RequestEmailVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestEmailVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RequestEmailVerificationRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RequestEmailVerificationRequestMultiError(errors)
	}

	return nil
}

func (m *RequestEmailVerificationRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RequestEmailVerificationRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RequestEmailVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by RequestEmailVerificationRequest.ValidateAll()
// if the designated constraints aren't met.
type RequestEmailVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestEmailVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestEmailVerificationRequestMultiError) AllErrors() []error { return m }

// RequestEmailVerificationRequestValidationError is the validation error
// returned by RequestEmailVerificationRequest.Validate if the designated
// constraints aren't met.
type RequestEmailVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestEmailVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestEmailVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestEmailVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestEmailVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestEmailVerificationRequestValidationError) ErrorName() string {
	return "RequestEmailVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestEmailVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestEmailVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestEmailVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestEmailVerificationRequestValidationError{}

// Validate checks the field values on ConfirmEmailVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmEmailVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmEmailVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConfirmEmailVerificationRequestMultiError, or nil if none found.
func (m *ConfirmEmailVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmEmailVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) != 10 {
		err := ConfirmEmailVerificationRequestValidationError{
			field:  "Code",
			reason: "value length must be 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ConfirmEmailVerificationRequestMultiError(errors)
	}

	return nil
}

// ConfirmEmailVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by ConfirmEmailVerificationRequest.ValidateAll()
// if the designated constraints aren't met.
type ConfirmEmailVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmEmailVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmEmailVerificationRequestMultiError) AllErrors() []error { return m }

// ConfirmEmailVerificationRequestValidationError is the validation error
// returned by ConfirmEmailVerificationRequest.Validate if the designated
// constraints aren't met.
type ConfirmEmailVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmEmailVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmEmailVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmEmailVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmEmailVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmEmailVerificationRequestValidationError) ErrorName() string {
	return "ConfirmEmailVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmEmailVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmEmailVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmEmailVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmEmailVerificationRequestValidationError{}

// Validate checks the field values on RequestPasswordResetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestPasswordResetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestPasswordResetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestPasswordResetRequestMultiError, or nil if none found.
func (m *RequestPasswordResetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestPasswordResetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RequestPasswordResetRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RequestPasswordResetRequestMultiError(errors)
	}

	return nil
}

func (m *RequestPasswordResetRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RequestPasswordResetRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RequestPasswordResetRequestMultiError is an error wrapping multiple
// validation errors returned by RequestPasswordResetRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestPasswordResetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestPasswordResetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestPasswordResetRequestMultiError) AllErrors() []error { return m }

// RequestPasswordResetRequestValidationError is the validation error returned
// by RequestPasswordResetRequest.Validate if the designated constraints
// aren't met.
type RequestPasswordResetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPasswordResetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPasswordResetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPasswordResetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPasswordResetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPasswordResetRequestValidationError) ErrorName() string {
	return "RequestPasswordResetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestPasswordResetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPasswordResetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPasswordResetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPasswordResetRequestValidationError{}

// Validate checks the field values on ConfirmPasswordResetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmPasswordResetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmPasswordResetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmPasswordResetRequestMultiError, or nil if none found.
func (m *ConfirmPasswordResetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmPasswordResetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := ConfirmPasswordResetRequestValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 8 || l > 72 {
		err := ConfirmPasswordResetRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 8 and 72 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConfirmPasswordResetRequestMultiError(errors)
	}

	return nil
}

// ConfirmPasswordResetRequestMultiError is an error wrapping multiple
// validation errors returned by ConfirmPasswordResetRequest.ValidateAll() if
// the designated constraints aren't met.
type ConfirmPasswordResetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmPasswordResetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmPasswordResetRequestMultiError) AllErrors() []error { return m }

// ConfirmPasswordResetRequestValidationError is the validation error returned
// by ConfirmPasswordResetRequest.Validate if the designated constraints
// aren't met.
type ConfirmPasswordResetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmPasswordResetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmPasswordResetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmPasswordResetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmPasswordResetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmPasswordResetRequestValidationError) ErrorName() string {
	return "ConfirmPasswordResetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmPasswordResetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmPasswordResetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmPasswordResetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmPasswordResetRequestValidationError{}
