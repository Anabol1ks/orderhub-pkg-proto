syntax = "proto3";

package auth.v1;

option go_package = "github.com/Anabol1ks/orderhub-pkg-proto/proto/auth/v1;authv1";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "common/v1/common.proto";


service AuthService {
  // Регистрация (по e-mail). Роль по умолчанию на сервере = ROLE_CUSTOMER
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Логин
  rpc Login(LoginRequest) returns (LoginResponse);

  // Обновление токенов
  rpc Refresh(RefreshRequest) returns (RefreshResponse);
  
  // Интроспекция access-токена (для внутренних сервисов)
  rpc Introspect(IntrospectRequest) returns (IntrospectResponse);

  // Выход (ревокация сессии)
  rpc Logout(LogoutRequest) returns (google.protobuf.Empty);

  // JWKS (публичные ключи для валидации JWT)
  rpc GetJwks(GetJwksRequest) returns (GetJwksResponse);

  // -------- На будущее: подтверждение регистрации (e-mail) `--------

  // Запрос на отправку письма с кодом/ссылкой подтверждения e-mail
  rpc RequestEmailVerification(RequestEmailVerificationRequest) returns (google.protobuf.Empty);

  // Подтверждение кода e-mail
  rpc ConfirmEmailVerification(ConfirmEmailVerificationRequest) returns (google.protobuf.Empty);

  // -------- На будущее: сброс пароля --------

  // Запрос на сброс пароля (письмо с кодом/ссылкой)
  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (google.protobuf.Empty);

  // Подтверждение сброса пароля (код + новый пароль)
  rpc ConfirmPasswordReset(ConfirmPasswordResetRequest) returns (google.protobuf.Empty);
}

message RegisterRequest {
  string email    = 1 [(validate.rules).string = {email: true,  max_len: 254}];
  string password = 2 [(validate.rules).string = {min_len: 8, max_len: 72}];
}

message RegisterResponse {
  orderhub.common.v1.UUID user_id = 1 [(validate.rules).message.required = true];
  string email   = 2 [(validate.rules).string = {email: true}];
  orderhub.common.v1.Role   role    = 3;
  google.protobuf.Timestamp created_at = 4;
}

message LoginRequest {
  string email    = 1 [(validate.rules).string = {email: true, max_len: 254}];
  string password = 2 [(validate.rules).string = {min_len: 8, max_len: 72}];
}
message LoginResponse {
  orderhub.common.v1.UUID user_id = 1 [(validate.rules).message.required = true];
  orderhub.common.v1.Role   role    = 2;
  TokenPair tokens = 3;
}

message TokenPair {
  string access_token  = 1 [(validate.rules).string = {min_len: 16}];
  string refresh_token = 2 [(validate.rules).string = {min_len: 24}];
  int64  access_expires_in  = 3; // сек
  int64  refresh_expires_in = 4; // сек
}

message RefreshRequest {
  string refresh_token = 1 [(validate.rules).string = {min_len: 24}];
}

message RefreshResponse {
  TokenPair tokens = 1;
}

message IntrospectRequest {
  string access_token = 1 [(validate.rules).string = {min_len: 20}];
}

message IntrospectResponse {
  bool active = 1;
  orderhub.common.v1.UUID user_id = 2 [(validate.rules).message.required = true] ;
  orderhub.common.v1.Role role = 3;     
  int64 exp_unix = 4;
  repeated string scopes = 5;
}

message LogoutRequest {
  oneof target {
    string refresh_token = 1 [(validate.rules).string = {min_len: 24}];
    bool all = 2;
  }
}

message GetJwksRequest {}

message Jwk {
  string kid = 1 [(validate.rules).string = {min_len: 1}];
  string kty = 2 [(validate.rules).string = {in: ["RSA"]}];
  string alg = 3 [(validate.rules).string = {in: ["RS256"]}];
  string use = 4 [(validate.rules).string = {in: ["sig"]}];
  string n   = 5 [(validate.rules).string = {min_len: 10}];
  string e   = 6 [(validate.rules).string = {min_len: 1}];
}

message GetJwksResponse {
  repeated Jwk keys = 1;
}

message RequestEmailVerificationRequest {
  // Если вызван авторизованным пользователем — можно не передавать email (брать из токена).
  string email = 1 [(validate.rules).string = {email: true}];
}

message ConfirmEmailVerificationRequest {
  string code  = 1 [(validate.rules).string = {min_len: 10, max_len: 10}];
}

// ===== Сброс пароля =====

message RequestPasswordResetRequest {
  string email = 1 [(validate.rules).string = {email: true}];
}

message ConfirmPasswordResetRequest {
  string code         = 1 [(validate.rules).string = {min_len: 6, max_len: 6}];
  string new_password = 2 [(validate.rules).string = {min_len: 8, max_len: 72}];
}
